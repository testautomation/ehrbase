version: '2'
# HOW TO USE ME
#   - installation: https://taskfile.dev/#/installation
#   - usage:        https://taskfile.dev/#/usage
#   - code:         https://github.com/go-task/task

# silent: true

tasks:
    default:
        desc: RESTART SUT
        cmds:
          - task: restart

    restart:
        desc: RESTART SUT
        cmds:
          - echo restarting EHRbase testlab ...
          - task: stop
          - task: start
          - echo EHRbase testlab restarted.

    start:
        desc: START SUT (NO CACHE)
        cmds:
          - task: startdb
          - task: starteb

    stop:
        desc: STOP SUT
        cmds:
          - task: stopeb
          - task: stopdb

    starteb:
        desc: START EHRBASE SERVER W/O CACHING (CACHE DISABLED!)
        cmds:
          - echo ... starting EHRbase server ...
          # - java -jar ../application/target/application-0.11.0.jar --cache.enabled=false --server.nodename=manual.execution.org > log &
          - java -jar ../application/target/application-0.11.0.jar --cache.enabled=false > log &
          - sleep 20
          - echo ... EHRbase server started.
          #- grep -m 1 "Started EhrBase in" <(tail -f log)   # FAIL!
          # https://github.com/go-task/task/issues/270

    starteb-cache:
        desc: START EHRBASE SERVER WITH CACHE ENABLED
        cmds:
          - echo ... staring EHRbase server ...
          - java -jar ../application/target/application-0.11.0.jar > log &
          - sleep 20
          - echo ... EHRbase server started.

    stopeb:
        desc: KILL EHRBASE SERVER
        cmds:
          - kill -9 $(jps | grep application-0.11.0.jar | awk '{print $1}')
          - echo ... EHRbase server stopped.

    startdb:
        desc: START POSTGRES DB DOCKER CONTAINER
        cmds:
          - echo ... starting DB server ...
          - docker run --name ehrdb -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -d -p 5432:5432 ehrbaseorg/ehrbase-database-docker:11.5
          - echo ... DB server started.

    stopdb:
        desc: KILL POSTGRES DB DOCKER CONTAINER
        cmds:
          - docker container rm -f ehrdb
          - echo ... DB server stopped.

    test:
        desc: RUN SPECIFIED TESTS
        cmds:
          # adjust this part to the needs of your current test session
          - robot -v nodocker -i empty_db -e future -e circleci -e TODO -e obsolete -d results -L TRACE --noncritical not-ready robot/QUERY_SERVICE_TESTS
          # example of "execute single test by it's test-case name" (wildcards accepted):
          # - robot -t "MF-030 - Create new EHR*" -d results -L TRACE robot/EHR_SERVICE_TESTS
          # - spd-say "Robot is ready! Check the results!"

    test-all:
        desc: RUN ALL ROBOT TESTS
        cmds:
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output compop.xml --name COMPO robot/COMPOSITION_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output contri.xml --name CONTRI robot/CONTRIBUTION_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output folder.xml --name FOLDER robot/DIRECTORY_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output ehrser.xml --name EHRSERVICE robot/EHR_SERVICE_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output ehrsta.xml --name EHRSTATUS robot/EHR_STATUS_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output knowld.xml --name KNOWLEDGE robot/KNOWLEDGE_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output aqledb.xml --name "QUERY empty_db"  -i empty_db  robot/QUERY_SERVICE_TESTS
          - robot -e future -e circleci -e TODO -e obsolete -e libtest -d results/xml -L TRACE --noncritical not-ready --log None --report None --output aqlldb.xml --name "QUERY loaded_db" -i loaded_db robot/QUERY_SERVICE_TESTS

          # consolidate results
          - rebot -e future -e circleci -e TODO -e obsolete -e libtest -d results -L TRACE --noncritical not-ready --name EHRbase results/xml/*.xml
          # - spd-say "Robot is ready! Check the results!"
